def @main(%input: Tensor[(1, 450), float32] /* ty=Tensor[(1, 450), float32] span=Shape_1.input:0:0 */) -> Tensor[(1, 2), float32] {
  %0 = strided_slice(%input, begin=[0i64], end=[150i64], strides=[1i64], axes=[1i64]) /* ty=Tensor[(1, 150), float32] span=Slice_3:0:0 */;
  %1 = qnn.quantize(%0, 0.03125f /* ty=float32 span=QuantizeLinear_3./Slice_output_0_scale:0:0 */, 0 /* ty=int32 span=QuantizeLinear_3:0:0 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 150), int8] span=QuantizeLinear_3:0:0 */;
  %2 = qnn.dense(%1, meta[relay.Constant][0] /* ty=Tensor[(60, 150), int8] span=QGemm_3.net1_1.0.weight_quantized:0:0 */, 0 /* ty=int32 span=QGemm_3:0:0 */, 0 /* ty=int32 span=QGemm_3:0:0 */, 0.03125f /* ty=float32 span=QGemm_3:0:0 */, 0.000976562f /* ty=float32 span=QGemm_3:0:0 */, units=60, out_dtype="int32") /* ty=Tensor[(1, 60), int32] span=QGemm_3:0:0 */;
  %3 = add(%2, meta[relay.Constant][1] /* ty=Tensor[(60), int32] span=QGemm_3.net1_1.0.bias_quantized:0:0 */) /* ty=Tensor[(1, 60), int32] span=QGemm_3:0:0 */;
  %4 = qnn.requantize(%3, 3.05176e-05f /* ty=float32 span=QGemm_3:0:0 */, 0 /* ty=int32 span=QGemm_3:0:0 */, 0.015625f /* ty=float32 span=QGemm_3./net1_1/net1_1.0/Gemm_output_0_scale:0:0 */, 0 /* ty=int32 span=QGemm_3:0:0 */, rounding="TONEAREST", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 60), int8] span=QGemm_3:0:0 */;
  %5 = strided_slice(%input, begin=[150i64], end=[300i64], strides=[1i64], axes=[1i64]) /* ty=Tensor[(1, 150), float32] span=Slice_2:0:0 */;
  %6 = qnn.quantize(%5, 0.03125f /* ty=float32 span=QuantizeLinear_2./Slice_1_output_0_scale:0:0 */, 0 /* ty=int32 span=QuantizeLinear_2:0:0 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 150), int8] span=QuantizeLinear_2:0:0 */;
  %7 = qnn.dense(%6, meta[relay.Constant][2] /* ty=Tensor[(60, 150), int8] span=QGemm_2.net1_2.0.weight_quantized:0:0 */, 0 /* ty=int32 span=QGemm_2:0:0 */, 0 /* ty=int32 span=QGemm_2:0:0 */, 0.03125f /* ty=float32 span=QGemm_2:0:0 */, 0.000976562f /* ty=float32 span=QGemm_2:0:0 */, units=60, out_dtype="int32") /* ty=Tensor[(1, 60), int32] span=QGemm_2:0:0 */;
  %8 = add(%7, meta[relay.Constant][3] /* ty=Tensor[(60), int32] span=QGemm_2.net1_2.0.bias_quantized:0:0 */) /* ty=Tensor[(1, 60), int32] span=QGemm_2:0:0 */;
  %9 = qnn.requantize(%8, 3.05176e-05f /* ty=float32 span=QGemm_2:0:0 */, 0 /* ty=int32 span=QGemm_2:0:0 */, 0.03125f /* ty=float32 span=QGemm_2./net1_2/net1_2.0/Gemm_output_0_scale:0:0 */, 0 /* ty=int32 span=QGemm_2:0:0 */, rounding="TONEAREST", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 60), int8] span=QGemm_2:0:0 */;
  %10 = strided_slice(%input, begin=[300i64], end=[450i64], strides=[1i64], axes=[1i64]) /* ty=Tensor[(1, 150), float32] span=Slice_1:0:0 */;
  %11 = qnn.quantize(%10, 0.03125f /* ty=float32 span=QuantizeLinear_1./Slice_2_output_0_scale:0:0 */, 0 /* ty=int32 span=QuantizeLinear_1:0:0 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 150), int8] span=QuantizeLinear_1:0:0 */;
  %12 = qnn.dense(%11, meta[relay.Constant][4] /* ty=Tensor[(60, 150), int8] span=QGemm_1.net1_3.0.weight_quantized:0:0 */, 0 /* ty=int32 span=QGemm_1:0:0 */, 0 /* ty=int32 span=QGemm_1:0:0 */, 0.03125f /* ty=float32 span=QGemm_1:0:0 */, 0.000976562f /* ty=float32 span=QGemm_1:0:0 */, units=60, out_dtype="int32") /* ty=Tensor[(1, 60), int32] span=QGemm_1:0:0 */;
  %13 = add(%12, meta[relay.Constant][5] /* ty=Tensor[(60), int32] span=QGemm_1.net1_3.0.bias_quantized:0:0 */) /* ty=Tensor[(1, 60), int32] span=QGemm_1:0:0 */;
  %14 = qnn.requantize(%13, 3.05176e-05f /* ty=float32 span=QGemm_1:0:0 */, 0 /* ty=int32 span=QGemm_1:0:0 */, 0.015625f /* ty=float32 span=QGemm_1./net1_3/net1_3.0/Gemm_output_0_scale:0:0 */, 0 /* ty=int32 span=QGemm_1:0:0 */, rounding="TONEAREST", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 60), int8] span=QGemm_1:0:0 */;
  %15 = nn.relu(%4) /* ty=Tensor[(1, 60), int8] span=Relu_3:0:0 */;
  %16 = nn.relu(%9) /* ty=Tensor[(1, 60), int8] span=Relu_2:0:0 */;
  %17 = nn.relu(%14) /* ty=Tensor[(1, 60), int8] span=Relu_1:0:0 */;
  %18 = (%15, %16, %17) /* ty=(Tensor[(1, 60), int8], Tensor[(1, 60), int8], Tensor[(1, 60), int8]) span=QLinearConcat_1:0:0 */;
  %19 = (0.015625f /* ty=float32 span=QLinearConcat_1:0:0 */, 0.03125f /* ty=float32 span=QLinearConcat_1:0:0 */, 0.015625f /* ty=float32 span=QLinearConcat_1:0:0 */) /* ty=(float32, float32, float32) span=QLinearConcat_1:0:0 */;
  %20 = (0 /* ty=int32 span=QLinearConcat_1:0:0 */, 0 /* ty=int32 span=QLinearConcat_1:0:0 */, 0 /* ty=int32 span=QLinearConcat_1:0:0 */) /* ty=(int32, int32, int32) span=QLinearConcat_1:0:0 */;
  %21 = qnn.concatenate(%18, %19, %20, 0.03125f /* ty=float32 span=QLinearConcat_1:0:0 */, 0 /* ty=int32 span=QLinearConcat_1:0:0 */, axis=1) /* ty=Tensor[(1, 180), int8] span=QLinearConcat_1:0:0 */;
  %22 = qnn.dense(%21, meta[relay.Constant][6] /* ty=Tensor[(30, 180), int8] span=QGemm_4.net2.1.weight_quantized:0:0 */, 0 /* ty=int32 span=QGemm_4:0:0 */, 0 /* ty=int32 span=QGemm_4:0:0 */, 0.03125f /* ty=float32 span=QGemm_4:0:0 */, 0.000976562f /* ty=float32 span=QGemm_4:0:0 */, units=30, out_dtype="int32") /* ty=Tensor[(1, 30), int32] span=QGemm_4:0:0 */;
  %23 = add(%22, meta[relay.Constant][7] /* ty=Tensor[(30), int32] span=QGemm_4.net2.1.bias_quantized:0:0 */) /* ty=Tensor[(1, 30), int32] span=QGemm_4:0:0 */;
  %24 = qnn.requantize(%23, 3.05176e-05f /* ty=float32 span=QGemm_4:0:0 */, 0 /* ty=int32 span=QGemm_4:0:0 */, 0.0078125f /* ty=float32 span=QGemm_4./net2/net2.1/Gemm_output_0_scale:0:0 */, 0 /* ty=int32 span=QGemm_4:0:0 */, rounding="TONEAREST", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 30), int8] span=QGemm_4:0:0 */;
  %25 = nn.relu(%24) /* ty=Tensor[(1, 30), int8] span=Relu_4:0:0 */;
  %26 = qnn.dense(%25, meta[relay.Constant][8] /* ty=Tensor[(2, 30), int8] span=QGemm_5.net2.3.weight_quantized:0:0 */, 0 /* ty=int32 span=QGemm_5:0:0 */, 0 /* ty=int32 span=QGemm_5:0:0 */, 0.0078125f /* ty=float32 span=QGemm_5:0:0 */, 0.00195312f /* ty=float32 span=QGemm_5:0:0 */, units=2, out_dtype="int32") /* ty=Tensor[(1, 2), int32] span=QGemm_5:0:0 */;
  %27 = add(%26, meta[relay.Constant][9] /* ty=Tensor[(2), int32] span=QGemm_5.net2.3.bias_quantized:0:0 */) /* ty=Tensor[(1, 2), int32] span=QGemm_5:0:0 */;
  %28 = qnn.requantize(%27, 1.52588e-05f /* ty=float32 span=QGemm_5:0:0 */, 0 /* ty=int32 span=QGemm_5:0:0 */, 0.00195312f /* ty=float32 span=QGemm_5.output_scale:0:0 */, 0 /* ty=int32 span=QGemm_5:0:0 */, rounding="TONEAREST", compute_dtype="int64", out_dtype="int8") /* ty=Tensor[(1, 2), int8] span=QGemm_5:0:0 */;
  qnn.dequantize(%28, 0.00195312f /* ty=float32 span=QGemm_5.output_scale:0:0 */, 0 /* ty=int32 span=DequantizeLinear_5:0:0 */, out_dtype="float32", axis=0) /* ty=Tensor[(1, 2), float32] span=DequantizeLinear_5:0:0 */
}

